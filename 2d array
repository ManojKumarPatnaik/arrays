Context 
Given a  2D Array, :

1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
We define an hourglass in  to be a subset of values with indices falling in this pattern in 's graphical representation:

a b c
  d
e f g
There are  hourglasses in , and an hourglass sum is the sum of an hourglass' values.

Task 
Calculate the hourglass sum for every hourglass in , then print the maximum hourglass sum.

Note: If you have already solved the Java domain's Java 2D Array challenge, you may wish to skip this challenge.

Input Format

There are  lines of input, where each line contains  space-separated integers describing 2D Array ; every value in  will be in the inclusive range of  to .

Constraints

Output Format

Print the largest (maximum) hourglass sum found in .

Sample Input

1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 2 4 4 0
0 0 0 2 0 0
0 0 1 2 4 0
Sample Output

19
Explanation

 contains the following hourglasses:

1 1 1   1 1 0   1 0 0   0 0 0
  1       0       0       0
1 1 1   1 1 0   1 0 0   0 0 0

0 1 0   1 0 0   0 0 0   0 0 0
  1       1       0       0
0 0 2   0 2 4   2 4 4   4 4 0

1 1 1   1 1 0   1 0 0   0 0 0
  0       2       4       4
0 0 0   0 0 2   0 2 0   2 0 0

0 0 2   0 2 4   2 4 4   4 4 0
  0       0       2       0
0 0 1   0 1 2   1 2 4   2 4 0
The hourglass with the maximum sum () is:

2 4 4
  2
1 2 4
Easy
Submitted 122036 times
Max Score 15
Need Help?

View Discussions
View Editorial Solution
View Top Submissions
Rate This Challenge:
Download problem statement
Download sample test cases
Suggest Edits
Current Buffer (saved locally, editable)     
 
Java 7

 
1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
​
7
public class Solution {
8
​
9
    public static void main(String[] args) {
10
        Scanner in = new Scanner(System.in);
11
        int arr[][] = new int[6][6];
12
        for(int arr_i=0; arr_i < 6; arr_i++){
13
            for(int arr_j=0; arr_j < 6; arr_j++){
14
                arr[arr_i][arr_j] = in.nextInt();
15
            }
16
        }
17
        int sum=0,max=-9999;
18
        for(int i=0;i<4;i++)
19
        {
20
            for(int j=0;j<4;j++)
21
            {
22
                sum=sum+arr[i][j]+arr[i][j+2]+arr[i][j+1]+arr[i+1][j+1]+arr[i+2][j]+arr[i+2][j+1]+arr[i+2][j+2];
23
                if(max<sum)
24
                {
25
                    max=sum;
26
                }
27
              sum=0;      
28
            }
29
        }
30
       System.out.println(max) ;
31
    }
32
}
33
​
